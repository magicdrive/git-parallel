#! /bin/bash

#
# git parallel -- Run the command in parallel much to multiple repositories
#
# Usage:
#  * git-parallel [-h|--help]                       # Show this help.
#  * git-parallel [-j|--jobs] job-count             # Execute in parallel with `job-count`
#  * git-parallel [-c|--color]                      # Show colored output.
#  * git-parallel [-m|--maxdepth] depth-count       # Search target git-repositories in maxdepth.
#  * git-parallel [-e|--execute] command|!command   # Execute command in target repositories
#  * git-parallel [-v|--version]                    # Show git-parallel version info.
#  * git-parallel [-d|--dry-run]                    # With `--execute`, Dry run it.
#  * git-parallel [-l|--list]                       # List up target git repositories.
#  * git-parallel [-t|--targets] repository-list    # Specified target git-repositories
#  * git-parallel [-f|--find] path                  # Search git repositories in path.
#  * git-parallel [-s|--silent]                     # Execute bad no output.
#  * git-parallel [-F|--freeze] repository-path     # Generate .git-parallel.freeze file.
#
# Author
#
# Copyright (c) 2013 - 2021 Hiroshi IKEGAMI
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

export GIT_PARALLEL_DEAULT_COLOR_MODE="${GIT_PARALLEL_DEAULT_COLOR_MODE:-"off"}"
export GIT_PARALLEL_DEAULT_SILENT_MODE="${GIT_PARALLEL_DEAULT_SILENT_MODE:-"off"}"
export GIT_PARALLEL_DEAULT_SILENT_MODE="${GIT_PARALLEL_DEAULT_SILENT_MODE:-"off"}"
export GIT_PARALLEL_DEAULT_JOBS="${GIT_PARALLEL_DEAULT_JOBS:-"2"}"
export GIT_PARALLEL_DEAULT_MAXDEPTH="${GIT_PARALLEL_DEAULT_MAXDEPTH:-"0"}"
export GIT_PARALLEL_DEAULT_START_DIR="${GIT_PARALLEL_DEAULT_MAXDEPTH:-$(cd ./ && pwd)}"

trap git::parallel::exit HUP INT QUIT TERM

git::parallel::help() {
cat << HELP > 2 && exit 1
Usage:
  * git-parallel [OPTIONS] -- [COMMAND]            # Run the command in parallel much to multiple repositories.
OPTIONS:
  * git-parallel [-h|--help]                       # Show this help.
  * git-parallel [-j|--jobs] job-count             # Execute in parallel with \`job-count\`
  * git-parallel [-m|--maxdepth] depth-count       # Search target git-repositories in maxdepth.
  * git-parallel [-v|--version]                    # Show git-parallel version info.
  * git-parallel [-l|--list]                       # List up target git repositories.
  * git-parallel [-d|--targets] target-derectory   # Specified target git-repositories
  * git-parallel [-F|--freeze] repository-path     # Generate .git-parallel.freeze file.
HELP
}

git::parallel::version() {
    echo "git-parallel v1.0.0"
}

git::parallel::freeze() {
    local repo="$1"
    if [ -d ${repo}/.git ]
        touch ${repo}/.git-parallel.freeze
        echo ${repo} now frozen.
    else
        echo ${repo} is not git-repository. > 2
    fi
}

git::parallel::reccursive_ps_killer() {
    local target_ps=$1
    for x in $(ps --ppid ${target_ps} --no-heading | awk '{ print $1 }') do
        git::parallel::reccursive_ps_killer "${x}"
    done
    kill -9 ${target_ps}
}

git::parallel::find_targets() {
    find -L "${GIT_PARALLEL_DEAULT_START_DIR}" \
        -maxdepth ${maxdepth} -name '.git' -type d | \
        perl -p -e "s{^\./}{}" | \
        perl -p -e "s{/\.git$}{}" | \
        grep -v "^$"
}

git::parallel::exit() {
    git::parallel::reccursive_ps_killer $$
}

git::parallel::execute() {
    local repository=$1
    local repository_name=$(basename ${repository})
    local git_command="${GIT_PARALLEL_EXEC_CMD}"
    local git_color="TRUE"

    [ -d "${repository}/.git" ] || return;
    [ "${git_color}" = TRUE ] && git_color_config="-c color.ui=always"

    if [ "${git_color}" = TRUE ];then
        print_cmd="\033[30;42mresult\033[0m \033[1;35mgit ${git_command}\033[0m"
        print_repo_name="\033[1;33m${repository_name}\033[0m"
    else
        print_cmd="${git_command}"
        print_repo_name="${repository_name}"
    fi

    cd ${repository}
    echo -e "result git ${print_cmd} ::: ${print_repo_name}"

    if [ -f "${repository}/.git-parallel.freeze" ];then
        echo skip.
        echo .git-parallel.freeze found.
        echo ${repository} is frozen.
        return
    fi

    git -C ${repository} ${git_color_config} ${git_command} 2>&1
}

git::parallel::job_pack() {
    local repo=${TARGET_REPOSITORIES[0]}
    TARGET_REPOSITORIES=("${TARGET_REPOSITORIES[@]:1}")
    if [[ -n ${repo} ]];then
        exec {task_fd}< <(git::parallel::execute "${repo}")
        fd_list=(${FD_LIST[@]} ${task_fd})
    fi
}

git::parallel::main() {
    git::parallel::setup
    FD_LIST=()
    TARGET_REPOSITORIES=($(git::parallel::find_targets))

    echo "start parallel: ${GIT_PARALLEL_EXEC_CMD} ";
    echo;

    while true; do
        for x in $(seq "${GIT_PARALLEL_DEAULT_JOBS}"); do
            git::parallel::job_pack
        done

        for x in ${FD_LIST[@]}; do
            cat <&${x} &
        done
        wait
        if [[ -z ${TARGET_REPOSITORIES} ]];then
            break
        fi
    done
}


optspec=":j:m:d:-:hvls"
while getopts "$optspec" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                help)
                    git::parallel::help && exit 1
                    ;;
                version)
                    git::parallel::version && exit 1
                    ;;
                list)
                    git::parallel::config::show_list && exit 1
                    ;;
                freeze)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    git::parallel::freeze "${val}" && exit 1
                    ;;
                jobs)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    GIT_PARALLEL_DEAULT_JOBS="${val}"
                    ;;
                maxdepth)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    GIT_PARALLEL_DEAULT_MAXDEPTH="${val}"
                    ;;
                target)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    GIT_PARALLEL_DEAULT_START_DIR="${val}"
                    ;;
                silent)
                    GIT_PARALLEL_DEAULT_SILENT_MODE="1"
                    ;;
                *)
                    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo "Unknown option --${OPTARG}" >&2
                    fi
                    ;;
            esac;;
        h)
            git::parallel::help && exit 1
            ;;
        v)
            git::parallel::version && exit 1
            ;;
        l)
            git::parallel::show_list && exit 1
            ;;
        F)
            git::parallel::freeze "${OPTARG}" && exit 1
            ;;
        j)
            GIT_PARALLEL_DEAULT_JOBS="${OPTARG}"
            ;;
        m)
            GIT_PARALLEL_DEAULT_MAXDEPTH="${OPTARG}"
            ;;
        d)
            GIT_PARALLEL_DEAULT_START_DIR="${OPTARG}"
            ;;
        *)
            if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            exit 1
            ;;
    esac
done

shift $((OPTIND - 1))

GIT_PARALLEL_EXEC_CMD=$@

git::parallel::main && exit 0

